#!/usr/bin/env bash

. "$(dirname "${BASH_SOURCE[0]}")/testlib.bsh"
. "$(dirname "${BASH_SOURCE[0]}")/test_utils.bsh"
. "$(dirname "${BASH_SOURCE[0]}")/../linux/elements.bsh"

begin_test "Dynamic Set Array"
(
  setup_test

  dynamic_set_a z
  check_a z
  not check_a z 111

  # Set up non-contiguous array
  y=(12 101 15 23 49)
  unset y[1] # Delete the 1

  # Run code
  dynamic_set_a x "${y[@]}"

  # Check values
  check_a x 12 15 23 49
  not check_a x
  contiguous_a x
  not contiguous_a y

  # Spaces
  x=(" one " " t w  o  ")
  y=()
  dynamic_set_a y "${x[@]}"
  [ "${y[0]}" = " one " ]
  [ "${y[1]}" = " t w  o  " ]
)
end_test

begin_test "Clear Array"
(
  setup_test
  function foo()
  {
    local x=(12 101 15 23 49) # global being shadowed by local
    local y=(12 101 15 23 49) # local only
    z=(12 101 15 23 49)       # global set in function only

    clear_a x
    clear_a y
    clear_a z

    check_a x
    check_a y
    check_a z
  }

  x=(11 22 33)

  foo
  not declare -p y
  declare -p z

  clear_a x
  check_a x
)
end_test

begin_test "Remove from Local Array"
(
  setup_test
  function foo()
  {
    local x=(12 101 15 23 49)

    remove_element_a x 15
    check_a x 12 101 23 49
    contiguous_a x
  }

  foo

  not declare -p x

)
end_test

begin_test "Remove from Array"
(
  setup_test

  x=(12 101 15 23 49)

  # Nothing case
  remove_element_a x 1234567890
  check_a x 12 101 15 23 49

  remove_element_a x 15
  check_a x 12 101 23 49
  contiguous_a x

  remove_element_a x 12
  check_a x 101 23 49
  contiguous_a x

  remove_element_a x 49
  check_a x 101 23
  contiguous_a x

  # Size 1 case
  remove_element_a x 101
  check_a x 23
  contiguous_a x

  # Size 0 case
  remove_element_a x 23
  check_a x
  contiguous_a x

  # Remove from tails and middle cases
  y=(666 101 15 666 23 49)
  remove_element_a y 666
  check_a y 101 15 23 49
  contiguous_a y

  i=(101 15 666 23 49 666)
  remove_element_a i 666
  check_a i 101 15 23 49
  contiguous_a i

  # Everything at once!
  j=(666 666 101 666 15 666 666 23 666 49 666 666)
  unset j[0]
  remove_element_a j 666
  check_a j 101 15 23 49
  contiguous_a j
)
end_test

begin_test "Append to beginning of array"
(
  setup_test

  # Empty case
  y=()
  add_element_pre_a y 11
  check_a y 11
  contiguous_a y

  # Hole
  x=(0 44 11 22 33 44)
  unset x[0]
  add_element_post_a x 44
  check_a x 11 22 33 44
  contiguous_a x

  x=(11 22 33 44 11)
  add_element_pre_a x 11
  check_a x 11 22 33 44
  contiguous_a x

  add_element_pre_a x 55
  check_a x 55 11 22 33 44
  contiguous_a x

  add_element_pre_a x 22
  check_a x 22 55 11 33 44
  contiguous_a x

  x=()
  add_element_pre_a x 11
  check_a x 11
  contiguous_a x

  add_element_pre_a x 11
  check_a x 11
  contiguous_a x
)
end_test

begin_test "Append end of array"
(
  setup_test

  # Empty case
  x=()
  add_element_post_a x 11
  check_a x 11
  contiguous_a x

  # Hole
  x=(0 44 11 22 33 44)
  unset x[0]
  add_element_post_a x 44
  check_a x 11 22 33 44
  contiguous_a x

  x=(44 11 22 33 44)
  add_element_post_a x 44
  check_a x 11 22 33 44
  contiguous_a x

  add_element_post_a x 55
  check_a x 11 22 33 44 55
  contiguous_a x

  add_element_post_a x 22
  check_a x 11 33 44 55 22
  contiguous_a x

  y=()
  add_element_post_a y 11
  check_a y 11
  contiguous_a y

  add_element_post_a y 11
  check_a y 11
  contiguous_a y
)
end_test

begin_test "Remove from string"
(
  setup_test

  # Unset case
  declare x
  remove_element x 15
  [ "${x}" = "" ]

  # Empty case
  x=''
  remove_element x 15
  [ "${x}" = "" ]

  # "Just the one" case
  x='15'
  remove_element x 15
  [ "${x}" = "" ]

  x='12 101 15 23 49'
  remove_element x 15
  [ "${x}" = "12 101 23 49" ]

  remove_element x 12
  [ "${x}" = "101 23 49" ]

  remove_element x 49
  [ "${x}" = "101 23" ]

  y="666 101 15 666 23 49"
  remove_element y 666
  [ "${y}" = "101 15 23 49" ]

  x="101 15 666 23 49 666"
  remove_element x 666
  [ "${x}" = "101 15 23 49" ]

  x="666 666 101 666 15 666 666 23 666 49 666 666"
  remove_element x 666
  [ "${x}" = "101 15 23 49" ]

  x='12:101:15:23:49'
  IFS=':' remove_element x 15
  [ "${x}" = "12:101:23:49" ]
)
end_test

begin_test "Append to beginning of string"
(
  setup_test

  # Unset case
  declare x
  add_element_pre x 15
  [ "${x}" = "15" ]

  # Empty case
  x=''
  add_element_pre x 15
  [ "${x}" = "15" ]

  y="11 22 33 44 11"
  add_element_pre y 11
  [ "${y}" = "11 22 33 44" ]

  add_element_pre y 55
  [ "${y}" = "55 11 22 33 44" ]

  add_element_pre y 22
  [ "${y}" = "22 55 11 33 44" ]

  x="11:22:33:44:11"
  IFS=: add_element_pre x 11
  [ "${x}" = "11:22:33:44" ]
)
end_test

begin_test "Append to end of string"
(
  setup_test

  # Unset case
  declare x
  add_element_post x 15
  [ "${x}" = "15" ]

  # Empty case
  x=''
  add_element_post x 15
  [ "${x}" = "15" ]

  y="44 11 22 33 44"
  add_element_post y 44
  [ "${y}" = "11 22 33 44" ]
  add_element_post y 55
  [ "${y}" = "11 22 33 44 55" ]
  add_element_post y 22
  [ "${y}" = "11 33 44 55 22" ]

  x="44:11:22:33:44"
  IFS=: add_element_post x 44
  [ "${x}" = "11:22:33:44" ]
)
end_test

begin_test "Comparing arrays"
(
  setup_test
  x=(11 22 33)
  y=(11 22 33)
  i=(11 22 31)
  j=(11 22 33 44)
  k=()

  cmp_elements_a x y
  cmp_elements_a y x
  cmp_elements_a x x
  cmp_elements_a y y
  cmp_elements_a k k
  not cmp_elements_a x i
  not cmp_elements_a x j
  not cmp_elements_a j x
  not cmp_elements_a k x
  not cmp_elements_a x k

  j=("${i[@]}")
  declare -p i
  declare -p j
  cmp_elements_a i j
  cmp_elements_a j i

  # Compare with a hole
  e=(11 22 33 44)
  f=(11 22 33 55)
  unset e[2]
  unset f[2]
  not cmp_elements_a e f

  e=(11 22 0  44)
  f=(11 0  22 44)
  unset e[2]
  unset f[1]
  cmp_elements_a e f

  x=(0 11 22 33)
  y=(11 22 0 33)
  unset x[0]
  unset y[2]
  cmp_elements_a x y
  cmp_elements_a y x

)
end_test

begin_test "Comparing strings"
(
  setup_test

  x="11 22  33"
  y="11 22 33"
  c="11 22 33 44"
  d="11 21 33"
  # declare z - I think this should fail. It's NOT set
  z=''

  cmp_elements x y
  cmp_elements y x
  cmp_elements x x
  cmp_elements y y
  cmp_elements z z
  not cmp_elements x c
  not cmp_elements x d
  not cmp_elements d x
  not cmp_elements z x
  not cmp_elements x z

  a="1:2:3"
  b="1: 2:3"
  IFS=": " cmp_elements a b
  c="1: 3:3"
  IFS=": " not cmp_elements b c
)
end_test

begin_test "Splitting strings"
(
  setup_test

  # Unset
  unset data
  split_s data
  check_a data

  # Empty
  unset data
  split_s data ''
  check_a data ""

  # Just one
  unset data
  split_s data 'foo'
  check_a data foo

  # Simple
  unset x
  split_s x 'foo//bar'
  check_a x foo bar

  # Path test
  unset y
  split_s y '/tmp/test.txt///opt/food///good'
  check_a y /tmp/test.txt /opt/food /good

  # Custom MIFS
  unset i
  MIFS='//://' split_s i '/tmp/test.txt///://opt/food//:///good'
  check_a i /tmp/test.txt/ opt/food /good

  # Single letter IFS
  unset j
  MIFS='/' split_s j '/tmp/test.txt///opt/food///good'
  check_a j "" tmp test.txt "" "" opt food "" "" good

  # Multiple strings
  unset var
  split_s var '/tmp/test.txt///opt/food' "good//bad" "" "hear//see//speak" ""
  check_a var /tmp/test.txt /opt/food good bad "" hear see speak ""

  # Spaces
  unset target
  split_s target ' /tmp/test.txt // /opt/fo od '
  check_a target ' /tmp/test.txt ' ' /opt/fo od '

)
end_test

begin_test "Joining arrays"
(
  setup_test

  join_a x
  [ -z "${x+set}" ]

  join_a x ""
  [ "${x}" = "" ]

  join_a x "" ""
  [ "${x}" = "//" ]

  join_a x_s 11 22 33
  [ "${x_s}" = "11//22//33" ]

  MIFS='//://' join_a y foo bar code
  [ "${y}" = "foo//://bar//://code" ]

  MIFS=":" join_a y_s hear see speak
  [ "${y_s}" = "hear:see:speak" ]

  join_a x red "" yellow green blue ""
  [ "${x}" = "red////yellow//green//blue//" ]
)
end_test

begin_test "Joining arrays to stdout"
(
  setup_test

  [ "$(join_a_out | xxd -ps)" = "$(printf '' | xxd -ps)" ]
  [ "$(join_a_out "" | xxd -ps)" = "$(printf '' | xxd -ps)" ]

  [ "$(join_a_out "" "" | xxd -ps)" = "$(printf '//' | xxd -ps)" ]

  [ "$(join_a_out 11 22 33 | xxd -ps)" = "$(printf '11//22//33' | xxd -ps)" ]

  [ "$(MIFS='//://' join_a_out foo bar code | xxd -ps)" = \
    "$(printf 'foo//://bar//://code' | xxd -ps)" ]

  [ "$(MIFS=":" join_a_out hear see speak | xxd -ps)" = \
    "$(printf 'hear:see:speak' | xxd -ps)" ]

  [ "$(join_a_out red "" yellow green blue "" | xxd -ps)" = \
    "$(printf 'red////yellow//green//blue//' | xxd -ps)" ]

  [ "$(MIFS='\\x00' join_a_out hear see speak | xxd -ps)" = \
    "$(printf 'hear\0see\0speak' | xxd -ps)" ]

)
end_test

begin_test "Is array"
(
  setup_test

  foo="ok"
  var_name=("ok")
  declare -ra bar2=("doe")
  declare bar3=()

  is_array var_name
  is_array bar2
  is_array bar3
  not is_array foo

  if [ "${BASH_VERSINFO[0]}" -gt "4" ] || ( [ "${BASH_VERSINFO[0]}" = "4" ] && [ "${BASH_VERSINFO[1]}" -ge "2" ] ); then
    declare -n bar4=bar3
    declare -n bar5=bar4
    declare -rau bar6=("doe")

    is_array bar4
    is_array bar5
    is_array bar6
  fi
)
end_test

begin_test "To array"
(
  setup_test

  x="this is a test"
  ans=(this is a test)
  to_array x
  check_a x "${ans[@]}"

  unset x
  x="  yet another : test "
  ans=(yet another : test)
  to_array x
  check_a x "${ans[@]}"

  unset x
  x="  yet another :   : test "
  ans=(yet another : : test)
  to_array x
  check_a x "${ans[@]}"

  unset x
  x=(11 22 "3 3")
  ans=(11 22 "3 3")
  to_array x
  check_a x "${ans[@]}"
)
end_test

begin_test "Subtract array"
(
  setup_test
  a=(11 22 33 00)
  b=(44 33 22)
  c=(55 66 77 88 99 1010 1111)
  subtract_array a b c
  check_a c 11 00

  c=()
  subtract_array b a c
  check_a c 44

  # Only a empty
  a=()
  c=()
  subtract_array a b c
  check_a c

  # Only b empty
  a=(11 22 33)
  b=()
  c=()
  subtract_array a b c
  check_a c 11 22 33

  # Both empty
  a=()
  c=()
  subtract_array a b c
  check_a c

  a=(0 11 22 33 00)
  b=(0 44 33 22)
  c=(0 55 66 77 88 99 1010 1111)
  unset a[0]
  unset b[0]
  unset c[0]
  unset c[1]
  unset c[2]
  unset c[3]
  unset c[4]
  subtract_array a b c
  check_a c 11 00

  subtract_array a b a
  check_a a 11 00
)
end_test

begin_test "Array length"
(
  setup_test

  unset x
  rv=0
  [ "$(array_length x)" = "-1" ]

  x=()
  [ "$(array_length x)" = "0" ]

  x=(11)
  [ "$(array_length x)" = "1" ]

  y=("" 11 22 "3 3")
  [ "$(array_length y)" = "4" ]

  unset y[0]
  [ "$(array_length y)" = "3" ]
)
end_test