#!/usr/bin/env false

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

source "${VSI_COMMON_DIR}/linux/signal_tools.bsh"

#*# linux/dir_tools

#**
# ===============
# Directory Tools
# ===============
#
# .. default-domain:: bash
#
# .. file:: dir_tools.bsh
#
# Tools that deal with directories and paths, including making temporary file paths.
#**

#**
# .. function:: parent_find_files
#
# :Arguments: ``$1``... - The names of the files being searched for
# :Return Value: file_matches - array containing matches
#
# Find files by searching up the parent tree
#
# Searches for files to use. It starts by checking the current directory, and goes up. Just like git searches for a .git directory
#**
parent_find_files()
{
  local name
  local pwd_before
  file_matches=()
  # Speed improvement: if it's right there, echo it out right away
  for name in "${@}"; do
    if [ -f "${name}" ]; then
      file_matches+=("${PWD}/${name}")
    fi
  done

  \pushd . > /dev/null
    # Search for the file until some match is found
    while [ "${#file_matches[@]}" -eq 0 ]; do
      for name in "${@}"; do
        if [ -f "${name}" ]; then
          file_matches+=("$(\cd "$(dirname "${name}")"; \pwd)/$(basename "${name}")")
        fi
      done

      pwd_before="${PWD}"

      \cd ..

      # This works both when PWD starts with / and //
      if [ "${PWD}" == "${pwd_before}" ]; then
        break
      fi
    done
  \popd > /dev/null
}

#**
# .. var:: _VSI_TEMP_PATHS
#
# .. note::
#   Do **NOT** mess with this variable. It is used to force recursive remove directories, and any mishaps could result in serious injury to computer, and you, depending on how upset you get by losing your computer.
#**
_VSI_TEMP_PATHS=()

#**
# .. function:: make_temp_path
#
# :Arguments: ``$1`` - Name of variable where temporary path will be stored
#             [``$2``...] - Optionally add additional arguments to mktemp call. The most useful thing to add would be ``-t``, as this is in all the OSes. ``-d`` is often used to make a directory
# :Output: ``$1`` - Name of temporary path
#
# Create self cleaning temp directories
#
# .. rubric:: Usage
#
# Use this to create a self deleting temp file/directory. If you do not want to have it self delete, just use ``mktemp`` instead.
#
# Can be called multiple times
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   make_temp_path temp_dir -d
#   touch "${temp_dir}"/file1
#
#   # Do NOT
#   t="$(make_temp_path temp_dir -d; echo "${temp_dir}")"
#   # or
#   (
#     make_temp_path temp_dir -d
#     touch "${temp_dir}"/file2
#   ) # The temp_dir is deleted here
#   cat "${temp_dir}"/file2 # Fails
#   # As these will create and delete the temp dir within the subcommand, by design
#
#   # This is good, as the temp files will be cleaned up sooner
#   (
#     make_temp_path temp_dir -d
#     touch "${temp_dir}"/file2
#     cat "${temp_dir}"/file2 # Success!
#   ) # The temp_dir is deleted here

# .. note::
#   This uses the EXIT, INT, and TERM traps. If you use these too, your traps will be automatically chained using :func:`trap_chain`.
#**
make_temp_path()
{
  local _local_variable_name="${1}"
  shift 1

  local _vsi_temporary_directory="$(mktemp ${@+"${@}"})"
  export -n "${_local_variable_name}=$_vsi_temporary_directory"

  _VSI_TEMP_PATHS+=("${_vsi_temporary_directory}")
  trap_chain _make_temp_path_cleanup EXIT
  trap_chain _make_temp_path_cleanup INT
  trap_chain _make_temp_path_cleanup TERM
}

_make_temp_path_cleanup()
{
  local temp_path
  for temp_path in ${_VSI_TEMP_PATHS+"${_VSI_TEMP_PATHS[@]}"}; do
    if [ -d "${temp_path}" ]; then
      if [[ ${OSTYPE-} = darwin* ]]; then
        rm -rf "${temp_path}"
      else
        # a little safer than rm -rf, in case of bind mounts
        find "${temp_path}" -mount -depth -delete
      fi
    elif [ -e "${temp_path}" ]; then
      rm -f "${temp_path}"
    fi
  done
}

#**
# .. function:: normpath
#
# :Argumetns: * ``$1`` - path
#
# :Output: *stdout* - Normalized path
#
# Prints out a normalized version of the path. With .., //, and ./ simplified out, and removes trailing /
#
# Unlike :file:`real_path`, this works on non-existing path, but is not as reliable as :file:`real_path`
#**
normpath()
{
  local IFS
  local x
  local components
  local new_components=()
  local absolute=0

  IFS=/
  components=(${1})

  # Special for absolute path
  if [ "${1:0:1}" = "/" ]; then
    absolute=1
  fi

  for x in "${!components[@]}"; do
    current="${components[$x]}"
    if [ "${current}" = "." ] || [ -z "${current}" ]; then
      continue
    elif [ "${current}" = ".." ]; then
      if [ "${#new_components[@]}" = "0" ]; then
        if [ "${absolute}" = "1" ]; then
          continue
        else
          new_components+=("${current}")
        fi
      else
        if [ "${new_components[${#new_components[@]}-1]}" = ".." ]; then
          new_components+=("${current}")
        else
          unset "new_components[${#new_components[@]}-1]"
        fi
      fi
    else
      new_components+=("${current}")
    fi
  done

  if [ "${absolute}" = "1" ]; then
    echo "/${new_components+${new_components[*]}}"
  elif [ "${#new_components[@]}" -gt 0 ] && [ "${new_components[0]}" = ".." ]; then
    echo "${new_components[*]}"
  else
    if [ "${#new_components[@]}" -gt 0 ]; then
      echo "./${new_components+${new_components[*]}}"
    else
      echo "."
    fi
  fi
}

#**
# .. function:: basenames
#
# :Arguments: * ``$1`` - Number of levels to keep
#             * ``$2`` - path
# :Output: *stdout* - base name up to ``$1`` levels deep
#
# Multiple level version of basename
#
# .. note::
#   ``basenames 2 test`` will result in ``./test`` as the implied dirname is ``.``
#**
basenames()
{
  local IFS=/
  local components=($(normpath "${2}"))
  local -i min=${#components[@]}-$1

  min=$(($min<0?0:$min))

  echo ${components+"${components[*]:${min}}"}
}

dirname()
{
  # Remove trailing slashes
  local dn="${1%${1##*[!/]}}"
  dn=${dn%/*}
  # If no slashes were found
  if [ "${dn}" = "${1}" ]; then
    # must be .
    echo -n .
  # /abc should be /, not empty
  elif [ -z "${dn}" ]; then
    echo -n /
  else
    # else found
    echo -n "${dn}"
  fi
}

basename()
{
  # Remove trailing slashes
  local bn="${1%${1##*[!/]}}"
  bn=${bn##*/}
  echo -n "${bn}"
}