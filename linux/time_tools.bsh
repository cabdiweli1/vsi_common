#!/usr/bin/env false

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/time_tools

#**
# ==========
# Time Tools
# ==========
#
# .. default-domain:: bash
#
# .. file:: time_tools.bsh
#
#**

#**
# .. function:: get_time_seconds
#
# Print the epoch time in seconds
#
# Uses the date command to print nanosecond accurate epoch time, if your date command supports that feature.
#
# Else, uses python or ruby if available to get microsecond accurate answer. If all else fails, use the date command which sometimes does not support more than second accuracy.
#**
get_time_seconds()
{
  # If this date doesn't support nanoseconds
  if [ "$(date +%N)" == "N" ]; then
    if command -v python &> /dev/null; then
      python -c "import time; print('%0.9f' % time.time())"
    elif command -v ruby &> /dev/null; then
      ruby -e "print Time.now.to_f"
    # Add other elif commands here for other common languages. Perl needs a
    # plugin, so that's a no-go.
    else # Else just do seconds, best I can do
      date '+%s.0'
    fi
  else
    date '+%s.%N'
  fi
}

#**
# .. function:: timeout
#
# :Arguments: * ``$1`` - Timeout in integer seconds
#             * ``$2``... - Command to execute
# :Return Value: 142 on time out
# :Uses: perl
#
# macOS function similar to linux timeout
#**
if [[ ${OSTYPE-} = darwin* ]]; then
  function timeout()
  {
    perl -e '\
      eval {
        local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
        alarm shift;
        exec @ARGV;
        alarm 0;
      };
      if ($@) {
        die unless $@ eq "alarm\n";   # propagate unexpected errors
      };' "${@}"
  }
fi

#**
# .. rubric:: Bugs
#
# Since this uses SIGALRM, bash will print out "Alarm clock: 14" to indicate SIGALRM (14) has been raised. This could cause unexpected text in stderr if you are parsing it.
#
# .. rubric:: Author
#
# https://perldoc.perl.org/functions/alarm.html
#
# .. seealso::
#   https://www.cyberciti.biz/faq/shell-scripting-run-command-under-alarmclock/
#**


# TODO: variable indirection to form a "scope" like behavior. On bash 4 use aarray, on bash 3.2 use old style  variables
if [ "$(date +%N)" == "N" ]; then
  _tictoc_cmd="date +%s000000000"
else
  _tictoc_cmd="date +%s%N"
fi

function tic()
{
  _time0="$($_tictoc_cmd)"
}
function toc()
{
  toc_time=$(($($_tictoc_cmd)-_time0))
  toc_time="${toc_time::${#toc_time}-9}"
  echo "${toc_time} s"
}
function toc_ms()
{
  toc_time=$(($($_tictoc_cmd)-_time0))
  toc_time="${toc_time::${#toc_time}-6}"
  echo "${toc_time} ms"
}
function toc_ns()
{
  toc_time=$(($($_tictoc_cmd)-_time0))
  echo "${toc_time} ns"
}
